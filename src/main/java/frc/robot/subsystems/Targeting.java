// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package frc.robot.subsystems;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import static frc.robot.Constants.TargetingConstants.*;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Targeting extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double vP = 0.3; //TODO Add these to constants and get instance of them
    private double vI = 0.045;
    private double vD = 0.85;

    private NetworkTable limeData;          //Data from limelight
    private NetworkTableEntry tAcquired;    // t stands for target
    private NetworkTableEntry targetX;      // x value of the target
    private NetworkTableEntry targetY;      // y value of the target

    private double errorIntegral = 0.0;
    private double lastError = 0.0;
 
    private boolean isReadyToFire = false;
    private Timer targetTimer = new Timer();

    public Targeting() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Get limelight data from network table
        limeData = NetworkTableInstance.getDefault().getTable("limelight");
        tAcquired = limeData.getEntry("tv");
        targetX = limeData.getEntry("tx");
        targetY = limeData.getEntry("ty");
        
        // Set default values for shuffleboard
        limeData.getEntry("camMode").setNumber(0);
        limeData.getEntry("ledMode").setNumber(LIMELIGHT_LED_ON);
        
        SmartDashboard.putNumber("P Gain", vP);
        SmartDashboard.putNumber("I Gain", vI);
        SmartDashboard.putNumber("D Gain", vD);
        SmartDashboard.putBoolean("isTargetted", false);
        SmartDashboard.putNumber("Target Timer",0.0);
        targetTimer.reset();
        targetTimer.stop();
    }

    @Override
    public void periodic() 
    {
        SmartDashboard.putNumber("Tx", targetX.getDouble(10000));
        SmartDashboard.putNumber("Ty", targetY.getDouble(10000));
        // Put code here to be run every loop
        // Get updated values from shuffleboard
        double p = SmartDashboard.getNumber("P Gain", 0);
        double i = SmartDashboard.getNumber("I Gain", 0);
        double d = SmartDashboard.getNumber("D Gain", 0);

        // Set PID if changed through shuffleboard
        if(p != vP) 
        {
            vP = p;
        }
        
        if(i != vI) 
        {
            vI = i;
        }
        
        if(d != vD) 
        {
            vD = d; 
        }
        SmartDashboard.putBoolean("isTargetted", isTargetted());
        SmartDashboard.putNumber("Target Timer",targetTimer.get());
        SmartDashboard.putNumber("Distance from Target", calcDistance());

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public boolean getIsReadyToFire()
    {
        return this.isReadyToFire;
    }

    // // Turns the LED on or off
    // public void controlLight(boolean enabled)
    // {
    //     if(enabled)
    //     {
    //         limeData.getEntry("ledMode").setNumber(LIMELIGHT_LED_ON); 
    //     }
    //     else
    //     {
    //         limeData.getEntry("ledMode").setNumber(LIMELIGHT_LED_OFF);
    //     }
    // }

    public double[] navToTarget()
    {
        double[] velCmds = {0.0,0.0}; //Left motor velocity, Right motor velocity (returns -1 to 1), At the target for a period of time

        //Turn the LED on
        //controlLight(true);

        //Do we have a target?
        if (tAcquired.getDouble(TARGET_NO_TARGET) == TARGET_ACQUIRED)
        {
            double limeError = targetX.getDouble(0.0); //Get the error of the target X
            double headingError = limeError / LIMELIGHT_ERROR_MAX; // 29.5 is the range of the limelight which goes from -29.5 to 29.5 
            double change = headingError - lastError;

            if(Math.abs(errorIntegral) < INTEGRAL_LIMIT) 
            {
                //Accumulate the error into the integral
                errorIntegral += headingError * INTEGRAL_WEIGHT;
                SmartDashboard.putNumber("Integral", errorIntegral);
            }
            
            //Calculate percent output to feed to velocity drive
            double percentOutput = (vP * headingError) + (vI * errorIntegral) + (vD * change);
            if(percentOutput > PERCENT_OUTPUT_LIMIT) 
            {
                percentOutput = PERCENT_OUTPUT_LIMIT;
            }
            else if(percentOutput < -PERCENT_OUTPUT_LIMIT) 
            {
                percentOutput = -PERCENT_OUTPUT_LIMIT;
            }
            
            //Set the velocity output
            velCmds[LEFT_MOTOR_IND] = percentOutput; //Left Motor Both negative for unknown reasons
            velCmds[RIGHT_MOTOR_IND] = -percentOutput; //Right Motor

            SmartDashboard.putNumber("Motor Vision Output", percentOutput);
            //Save last error
            lastError = headingError;
        }
        SmartDashboard.putBoolean("isTargetted", isReadyToFire);
        return velCmds;
    }

    public double calcShooterRPM()
    {
        double retval = 0.0;
        if(tAcquired.getDouble(0.0) == TARGET_ACQUIRED)
        {
            //This is where we would calculate the distance
            retval = DEFAULT_LAUNCHER_RPM;
        }

        return retval;
    }

    public void resetPID()
    {
        errorIntegral = ERROR_INTEGRAL_DEFAULT;
        lastError = LAST_ERROR_DEFAULT;
    }

    public boolean isTargetted(){
        double limeError = targetX.getDouble(0.0); //Get the error of the target X

        if(Math.abs(limeError) < CONFIRMED_THRESHOLD) 
        {
            if(targetTimer.get() == 0.0){
                targetTimer.start();
            }
            else if(targetTimer.get() >= CONFIRMED_TIME){
                return true;
            }

            return false;
        }
        else
        {
            targetTimer.stop();
            targetTimer.reset();
            return false;
        }
    }

    public double calcDistance(){
        double targetOffsetAngle_Vertical = targetY.getDouble(0.0);
        double limelightMountAngleDegrees = 26.742; 
        double limelightLensHeightInches = 11.5; 
        double goalHeightInches = 104.0; 
        
        double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical; 
        double angleToGoalRadians = Math.toRadians(angleToGoalDegrees); 
        double distanceFromLimelightToGoalInches = (goalHeightInches - limelightLensHeightInches)/Math.tan(angleToGoalRadians);

        return distanceFromLimelightToGoalInches; 
    }
}